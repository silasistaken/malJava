;ROOT OF LISP INTERPRETER CODE with TESTS
;slightly adjusted from the original article since we handle true/false differently
;can be loaded by passing the file path to the main method or using the "load" function of the interpreter i.e. (load "path\to\interpreter.txt")

;tests whether its argument is the empty list
(defun null. (x)
    (eq x '()))
;-----------------------------------------------------------

;returns #true if both its arguments do and #false otherwise
(defun and. (x y)
    (cond   (x
                (cond (y  true) ('true  false)))
            (true false)))
;-----------------------------------------------------------

;logical not
(defun not. (x)
    (cond (x false)
          ('else true)))
;-----------------------------------------------------------

;takes 2 lists and returns their concatenation
(defun append. (x y)
    (cond ((null. x) y)
          ('else (cons (car x) (append. (cdr x) y)))))
;-----------------------------------------------------------


(defun list. (x y)
  (cons x (cons y '())))
(list. 'a '())
;-----------------------------------------------------------

(defun pair. (x y)
    (cond   ((and. (null. x) (null. y)) '())
            ((and. (not. (atom x)) (not. (atom y)))
                (cons   (list (car x) (car y))
                        (pair. (cdr x) (cdr y))))))
;-----------------------------------------------------------

(defun caar (x)
    (car (car x)))
(defun cadar (x)
    (car (cdr (car x))))

(defun cadr (x)
    (car (cdr x)))

(defun caddr (x)
    (car (cdr (cdr x))))

(defun caddar (x)
    (car (cdr (cdr (car x)))))
;-----------------------------------------------------------

(defun assoc. (x y)
    (cond   ((eq (caar y) x) (cadar y))
            ('default (assoc. x (cdr y)))))
;-----------------------------------------------------------

(defun evcon. (c a)
    (cond   ((eval. (caar c) a)
             (eval. (cadar c) a))
            ('default (evcon. (cdr c) a))))

(defun evlis. (m a)
    (cond   ((null. m) '())
            ('default (cons (eval. (car m) a)
                            (evlis. (cdr m) a)))))

;-----------------------------------------------------------

(defun eval. (e a)
    (cond
        ((atom e) (assoc. e a))
        ((atom (car e)) (cond
            ((eq (car e) 'quote)    (cadr e))
            ((eq (car e) 'atom)     (atom   (eval. (cadr e) a)))
            ((eq (car e) 'eq)       (eq     (eval. (cadr e) a)
                                            (eval. (caddr e) a)))
            ((eq (car e) 'car)      (car    (eval. (cadr e) a)))
            ((eq (car e) 'cdr)      (cdr    (eval. (cadr e) a)))
            ((eq (car e) 'cons)     (cons   (eval. (cadr e) a)
                                            (eval. (caddr e) a)))
            ((eq (car e) 'cond)     (evcon. (cdr e) a))
            ('t (eval. (cons    (assoc. (car e) a)
                                (cdr e))
                        a))))

        ((eq (caar e) 'label)   (eval.  (cons (caddar e) (cdr e))
                                        (cons (list (cadar e) (car e)) a)))
        ((eq (caar e) 'lambda)  (eval.  (caddar e)
                                        (append. (pair. (cadar e) (evlis. (cdr e) a)) a)))))
